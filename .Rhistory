modelm <- modelselect()
devtools::install_github('gstat')
library(githubinstall)
githubinstall::gh_install_packages('gstat')
install.packages('gstat')
install.packages("gstat")
library(gstat)
library(demgenerator)
modelselect()
meuse()
data("meuse")
data("meuse.grid")
View(meuse.grid)
raster(meuse.grid)
raster(meuse.grid,['dist'])
raster(meuse.grid['dist'])
pwd
pwd()
getwd()
test<-raster('/data/An_giang_MERIT_extended_R_simulated_1.tif')
test<-raster('data/An_giang_MERIT_extended_R_simulated_1.tif')
plot(test)
modelsv <- modelselect()
sims <- demgeneration(test,modelsv,nsim=3)
sessionInfo()
sims
plot(sims)
download.CCI <- function(){
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
lcmap <- download.file(downloadurl,temp)
#lcmap <- download.file(downloadurl,'ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
return (lcmap)
}
download.CCI()
lcmap <-download.CCI()
lcmap <-download.CCI()
lcmap <- raster('ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
lcmap <- raster::raster('ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
lcmap <- download.file(downloadurl,temp)
lcmap_ras <- download.CCI()
lcmap_ras <- raster::raster(temp)
temp
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
download.file(downloadurl,temp,mode='wb')
lcmap_ras <- raster::raster(temp)
plot(lcmap_ras)
raster::plot(lcmap_ras)
getwd()
rasterim <- raster::raster('data/An_giang_MERIT_extended_R_simulated_1.tif')
rasterim
raster::plot(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
download.CCI(rasterim)
download.CCI(rasterim)
if (missing(targetDEM))
stop("No DEM to simulate selected")
download.CCI()
download.CCI <- function(targetDEM)
{
if (missing(targetDEM))
stop("No DEM to simulate selected")
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
download.file(downloadurl,temp,mode='wb')
lcmap_ras <- raster::raster(temp)
ex<- raster::extent(targetDEM)
lcmap_rascrop <- raster::crop(lcmap_ras,ex) #Crop CCI
CCI <-raster::resample(lcmap_rascrop,targetDEM,method='ngb')
#lcmap <- download.file(downloadurl,'ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
#lcmap <- raster::raster('ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
return (targetDEM)
}
download.CCI()
mekonglc <- download.CCI(rasterim)
lcmap_ras
download.CCI <- function(targetDEM)
{
if (missing(targetDEM))
stop("No DEM to simulate selected")
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
download.file(downloadurl,temp,mode='wb')
lcmap_ras <- raster::raster(temp)
ex<- raster::extent(targetDEM)
lcmap_rascrop <- raster::crop(lcmap_ras,ex) #Crop CCI
CCI <-raster::resample(lcmap_rascrop,targetDEM,method='ngb')
#lcmap <- download.file(downloadurl,'ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
#lcmap <- raster::raster('ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
return (CCI)
}
mekonglc <- download.CCI(rasterim)
tmp_dir <- tempdir()
list.files(tmp_dir)
file.exists(temp)
file.remove(temp)
files <- list.files(tmp_dir, full.names = T, pattern = "^file")
files
file.remove(files)
library(demgenerator)
getwd()
mekonglc <- download.CCI(rasterim)
plot(mekonglc)
freq(mekonglc)
?demgeneration
devtools::document()
?download.CCI
library(DEMsimulation)
devtools::use_readme_rmd()
rmarkdown::render("README.Rmd")
cci_lookup <- read.csv('C:/Users/lh14461/PhD/DEM Work/CCI LookupTable.csv')
save(cci_lookup,'cci_lookup.RData')
save(cci_lookup,file = "cci_lookup.RData")
data("cci_lookup")
data("Avg_SV_by_landcover_type_600_slopeexclude_5")
load('C:/Users/lh14461/PhD/DEM Work/Avg_SV_by_landcover_type_600_slopeexclude_5.RData')
MERIT_Avg_LC <- Burdekin_vegSV_avg
save(MERIT_Avg_LC,file = "MERIT_AvgSV_LC.RData")
data("MERIT_AvgSV_LC.RData")
data("MERIT_AvgSV_LC.RData")
data("MERIT_AvgSV_LC.RData")
data("cci_lookup")
data("MERIT_AvgSV_LC")
model <- data("MERIT_AvgSV_LC")
names(MERIT_Avg_LC)
devtools::load_all()
Ba <- raster('C:/Users/lh14461/PhD/DEM Work/DEMsimulation/data/Ba_MERIT_Z.tif')
save(Ba,file = "Ba.RData")
devtools::load_all()
DEMsimulation::Ba
dem <- DEMsimulation::Ba
LC_map <- download.CCI(dem)
LC_map
simt <- demsimulation_LC(target_raster = dem, LC_map = LC_map,maxdist = 0.01, nsim = 10)
target_raster <- dem
target_dem_df <- raster::as.data.frame(target_raster, xy = TRUE, na.rm = TRUE)
dem
as.data.frame(dem)
plot(raster())
data("Ba_MERIT")
plot(Ba_MERIT)
devtools::install()
rm(Ba_MERIT)
data("Ba_MERIT")
plot(Ba_MERIT)
Ba_MERIT <- raster('data-raw/Ba_MERIT_Z.tif')
load("C:/Users/lh14461/PhD/DEM Work/DEMsimulation/data/Ba_MERIT.rda")
getwd()
devtools::use_data()
devtools::use_data(Ba_MERIT)
devtools::use_data_raw(Ba_MERIT)
devtools::use_data(Ba_MERIT)
devtools::use_data(Ba_MERIT,overwrite = TRUE)
rm(Ba_MERIT)
plot(Ba_MERIT)
data("Ba_MERIT")
plot(Ba_MERIT)
Ba_MERIT
Ba_MERIT <- raster('data-raw/Ba_MERIT_Z.tif')
Ba_MERIT
plot(Ba_MERIT)
devtools::use_data(Ba_MERIT)
devtools::install()
rm(Ba_MERIT)
data("Ba_MERIT")
plot(Ba_MERIT)
Ba_MERIT <- raster('data-raw/Ba_MERIT_Z.tif')
Ba_MERIT
devtools::use_data(Ba_MERIT,overwrite = TRUE)
data("Ba_MERIT")
library(DEMsimulation)
rm(Ba_MERIT)
data("Ba_MERIT")
Ba_MERIT
plot(Ba_MERIT)
data("MERIT_AvgSV_LC")
names(MERIT_Avg_LC)
rasterVis::levelplot(Ba_MERIT)
rasterVis::levelplot(Ba_MERIT,scales=list(draw=FALSE))
rasterVis::levelplot(Ba_MERIT,scales=list(draw=FALSE),col.regions = terrain.colors(length(at) - 1))
rasterVis::levelplot(Ba_MERIT,scales=list(draw=FALSE),col.regions = terrain.colors(100)
rasterVis::levelplot(Ba_MERIT,scales=list(draw=FALSE),col.regions = terrain.colors(100))
rasterVis::levelplot(Ba_MERIT,col.regions = terrain.colors(250))
rasterVis::levelplot(Ba_MERIT)
rasterVis::levelplot(Ba_MERIT,margin=FALSE)
rasterVis::levelplot(Ba_MERIT,margin=FALSE,main='Ba MERIT DEM')
rasterVis::levelplot(Ba_MERIT,margin=FALSE,main='Ba MERIT DEM',col.regions=terrain.colors(100))
rasterVis::levelplot(Ba_MERIT,margin=FALSE,main='Ba MERIT DEM',par.settings=terrain())
rasterVis::levelplot(Ba_MERIT,margin=FALSE,main='Ba MERIT DEM',par.settings=terrain(100))
rasterVis::levelplot(Ba_MERIT,margin=FALSE,main='Ba MERIT DEM',par.settings=BTCTheme)
rasterVis::levelplot(Ba_MERIT,margin=FALSE,main='Ba MERIT DEM',col.regions=terrain.colors(250))
rasterVis::levelplot(Ba_MERIT,margin=FALSE,main='Ba MERIT DEM')
BA_CCI <- DEMsimulation::download.CCI(Ba_MERIT)
BA_CCI
plot(BA_CCI)
writeRaster(BA_CCI,'Ba_CCI.tif')
load(BA_CCI)
load('BA_CCI.tif')
library(DEMsimulation)
data(Ba_CCI)
Ba_CCI <- raster('data-raw/Ba_CCI.tif')
devtools::use_data(Ba_CCI,overwrite = TRUE)
data("Ba_CCI")
rm(Ba_CCI)
rm(Ba_CCI)
rm(BA_CCI)
rm(Ba_MERIT)
library(DEMsimulation)
data("Ba_CCI")
plot(Ba_CCI)
CCIf <- as.factor(Ba_CCI)
CCIf <- as.factor(Ba_CCI)
## Add a landcover column to the Raster Attribute Table
rat <- levels(CCIf)[[1]]
cci_lookup <- DEMsimulation::cci_lookup #Landcover lookup Table
rat[["landcover"]] <- cci_lookup$LCCOwnLabel[match(rat$ID,cci_lookup$NB_LAB)]
levels(CCIf) <- rat
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0(AOI,' Landcover Map'),adj=0.75,cex=1.5, x=unit(0.35, "npc")))
library(rasterVis)
CCIf <- as.factor(Ba_CCI)
## Add a landcover column to the Raster Attribute Table
rat <- levels(CCIf)[[1]]
cci_lookup <- DEMsimulation::cci_lookup #Landcover lookup Table
rat[["landcover"]] <- cci_lookup$LCCOwnLabel[match(rat$ID,cci_lookup$NB_LAB)]
levels(CCIf) <- rat
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0(AOI,' Landcover Map'),adj=0.75,cex=1.5, x=unit(0.35, "npc")))
CCIf <- as.factor(Ba_CCI)
## Add a landcover column to the Raster Attribute Table
rat <- levels(CCIf)[[1]]
cci_lookup <- DEMsimulation::cci_lookup #Landcover lookup Table
rat[["landcover"]] <- cci_lookup$LCCOwnLabel[match(rat$ID,cci_lookup$NB_LAB)]
levels(CCIf) <- rat
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0(AOI,' Landcover Map'),adj=0.75,cex=1.5, x=unit(0.35, "npc")))
library(rasterVis)
CCIf <- as.factor(Ba_CCI)
## Add a landcover column to the Raster Attribute Table
rat <- levels(CCIf)[[1]]
cci_lookup <- DEMsimulation::cci_lookup #Landcover lookup Table
rat[["landcover"]] <- cci_lookup$LCCOwnLabel[match(rat$ID,cci_lookup$NB_LAB)]
levels(CCIf) <- rat
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0('Ba Landcover Map'),adj=0.75,cex=1.5, x=unit(0.35, "npc")))
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
+           ,main=list(paste0('Ba Landcover Map'),adj=0.75,cex=1.5, x=unit(0.35, "npc")))
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0('Ba Landcover Map'),adj=0.75,cex=1.5, x=unit(0.35, "npc"))
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0('Ba Landcover Map'),adj=0.75,cex=1.5, x=unit(0.35, "npc")))
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0('Ba Landcover Map'),adj=0.75,cex=1.5)
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0('Ba Landcover Map'),adj=0.75,cex=1.5))
library(grid)
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0('Ba Landcover Map'),adj=0.75,cex=1.5, x=unit(0.35, "npc")))
CCIf <- as.factor(Ba_CCI)
## Add a landcover column to the Raster Attribute Table
rat <- levels(CCIf)[[1]]
cci_lookup <- DEMsimulation::cci_lookup #Landcover lookup Table
rat[["landcover"]] <- cci_lookup$LCCOwnLabel[match(rat$ID,cci_lookup$NB_LAB)]
levels(CCIf) <- rat
levelplot(CCIf, col.regions=rev(brewer.pal(nrow(rat),'Set3')), xlab="", ylab=""
,main=list(paste0('Ba Landcover Map'),adj=0.75,cex=1.5, x=unit(0.35, "npc")))
data("Ba_MERIT")
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, maxdist = 0.01, nsim = 20)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, maxdist = 0.01, nsim = 20)
data("cci_lookup")
data(paste0(sv,"_AvgSV_LC")
data(paste0(sv,"_AvgSV_LC"))
paste0(sv,"_AvgSV_LC")
sv='MERIT'
data(paste0(sv,"_AvgSV_LC"))
paste0(sv,"_AvgSV_LC")
svname<-paste0(sv,"_AvgSV_LC")
data(svname)
model <- MERIT_Avg_LC
data("MERIT_AvgSV_LC")
model <- paste0(sv,'_Avg_LC')
devtools::use_data(cci_lookup, internal = TRUE)
model <- list(paste0(sv,'_Avg_LC'))
model <- c(paste0(sv,'_Avg_LC'))
model <- MERIT_Avg_LC
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, maxdist = 0.01, nsim = 20)
LC_Map = Ba_CCI
CCI <- LC_map
LC_map = Ba_CCI
CCI <- LC_map
CCI[CCI==210] <- NA #Set water to NA
veg <- freq(CCI) ##Count cells of unique values
veg <- data.frame(veg) #Get into a dataframe
veg_to_analyse <- as.numeric(na.omit(veg[,1])) #Takes away any NA land class
vegdf<-data.frame(veg_to_analyse) #veg to analyse as dataframe
vegdf$name<-cci_lookup$LCCOwnLabel[match(vegdf$veg,cci_lookup$NB_LAB)]
veg_names<-as.character(vegdf[,2]) #extract names of landcover
sv_names <- names(model) #Get character vector of Landcover types in avg sv list
sv_index <- match(veg_names,sv_names) #Get index of avg sv list that matches Lnadcover types in target raster
sv_index[is.na(sv_index)] <- 1 # If no match use the overall average which is number 1 in list
simDEM <- raster::stack()
veg_to_predict <- veg_to_analyse[i] #CCI number
MERIT_veg_to_analyse <- overlay(DEM, CCI, fun = function(x, y) {
x[y!=veg_to_predict] <- NA
return(x)
}) # Selects only MERIT Z that is within CCI
DEM=Ba_MERIT
simDEM <- raster::stack()
veg_to_predict <- veg_to_analyse[i] #CCI number
MERIT_veg_to_analyse <- overlay(DEM, CCI, fun = function(x, y) {
x[y!=veg_to_predict] <- NA
return(x)
}) # Selects only MERIT Z that is within CCI
veg_to_predict <- veg_to_analyse[i] #CCI number
library(DEMsimulation)
data("Ba_MERIT")
data("Ba_CCI")
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, maxdist = 0.01, nsim = 20)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
DEM <- Ba_MERIT
plot(Ba_MERIT)
LC_map <- Ba_CCI
data("cci_lookup")
data("MERIT_AvgSV_LC")
target_dem_df <- raster::as.data.frame(DEM, xy = TRUE, na.rm = TRUE)  #Data frame with simulation locations
names(target_dem_df) <- c("X", "Y", "MERIT_Z")  # Rename
model <- MERIT_Avg_LC
CCI <- LC_map
CCI[CCI==210] <- NA #Set water to NA
#Find out the landcover Types involved
veg <- freq(CCI) ##Count cells of unique values
veg <- data.frame(veg) #Get into a dataframe
veg_to_analyse <- as.numeric(na.omit(veg[,1])) #Takes away any NA land class
vegdf<-data.frame(veg_to_analyse) #veg to analyse as dataframe
vegdf$name<-cci_lookup$LCCOwnLabel[match(vegdf$veg,cci_lookup$NB_LAB)] #Add new coloumn with names
veg_names<-as.character(vegdf[,2]) #extract names of landcover
#Find index of Landcover matches in semi-variogram list
sv_names <- names(model) #Get character vector of Landcover types in avg sv list
sv_index <- match(veg_names,sv_names) #Get index of avg sv list that matches Lnadcover types in target raster
sv_index[is.na(sv_index)] <- 1 # If no match use the overall average which is number 1 in list
for (i in 1:length(veg_to_analyse)){
veg_to_predict <- veg_to_analyse[i] #CCI number
MERIT_veg_to_analyse <- overlay(DEM, CCI, fun = function(x, y) {
x[y!=veg_to_predict] <- NA
return(x)
}) # Selects only MERIT Z that is within CCI
for (i in 1:length(veg_to_analyse)){
veg_to_predict <- veg_to_analyse[i] #CCI number
MERIT_veg_to_analyse <- overlay(DEM, CCI, fun = function(x, y) {
x[y!=veg_to_predict] <- NA
return(x)
}) # Selects only MERIT Z that is within CCI
for (i in 1:length(veg_to_analyse)){
veg_to_predict <- veg_to_analyse[i] #CCI number
MERIT_veg_to_analyse <- overlay(DEM, CCI, fun = function(x, y) {
x[y!=veg_to_predict] <- NA
return(x)
})
}# Selects only MERIT Z that is within CCI
target_dem_df <- raster::as.data.frame(MERIT_veg_to_analyse, xy=TRUE, na.rm = TRUE) #Data frame with simulation locations
library(DEMsimulation)
data("Ba_MERIT")
data("Ba_CCI")
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
data("Ba_MERIT")
library(DEMsimulation)
data("Ba_MERIT")
data("Ba_CCI")
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
library(DEMsimulation)
data("Ba_CCI")
data("Ba_MERIT")
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
library(DEMsimulation)
data("Ba_MERIT")
data("Ba_CCI")
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
simDEM
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
x
plot(x[1])
plot(x[[1]])
simDEM_select <- seq(from=i,length.out=length(veg_to_analyse),by=nsim)
nsim=20
simDEM_select <- seq(from=i,length.out=length(veg_to_analyse),by=nsim)
library(DEMsimulation)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
library(DEMsimulation)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
writeRaster(sim_LC,filename = 'Ba_MERIT_LC', bylayer=TRUE, suffix='numbers',format='GTiff')
writeRaster(sim_LC,filename = 'Ba_MERIT_LC', bylayer=TRUE, suffix='numbers',format='GTiff')
load('C:/Users/lh14461/PhD/DEM Work/All_SV_with_veg_600_slopeexclude5_SRTM.RData')
load('C:/Users/lh14461/PhD/DEM Work/Avg_SV_by_landcover_type_600_slopeexclude_5_SRTM.RData')
SRTM_Avg_LC <- Burdekin_vegSV_avg_SRTM
save(SRTM_Avg_LC,file = 'SRTM_AvgSV_LC.RData')
library(DEMsimulation)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='',maxdist = 0.01, nsim = 20)
library(DEMsimulation)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
library(DEMsimulation)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
sv='MERIT'
if (sv == 'MERIT')
sv == 'MERIT'
library(DEMsimulation)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01, nsim = 20)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='SRTM',maxdist = 0.01, nsim = 20)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERi',maxdist = 0.01, nsim = 20)
sim_LC <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI, sv='MERIT',maxdist = 0.01)
modelselect <- MERIT_Avg_LC$Overall
name(modelselect)
modelselect
lc <- 'Overall'
modeluse <- model[[sv_index[i]]]
modeluse
modelselect <- model[lc]
modelselect <- model[[lc]]
library(DEMsimulation)
sim_over <- demsimulation(Ba_MERIT, sv='MERIT', lc='Overall', maxdist=0.01, nsim=10)
names(MERIT_Avg_LC)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=10)
print(sv)
print(lc)
print(paste0('Using ',lc))
print(paste0('Using ',lc,' semi-variograms'))
library(DEMsimulation)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=10)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Croplan', maxdist=0.01, nsim=10)
if (length(modelselect)==0)
if (modelselect == '')
print(paste0('Using ',lc,' semi-variograms'))
# set max dist
if (missing(maxdist)) message('Setting maxdist to 0.01')
library(DEMsimulation)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Croplan', maxdist=0.01, nsim=10)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=10)
library(DEMsimulation)
library(DEMsimulation)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=10, debuglevel = 1)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=10)
library(DEMsimulation)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=10)
modelselect == ''
is.empty(modelselect)
lc <- 'cfp'
modelselect2 <- model[[lc]] #select model
is.na(modelselect2)
is.null(modelselect2)
library(DEMsimulation)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Croplan', maxdist=0.01, nsim=10)
sim_Crop <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=10)
citation("DEMsimulation")
mbm <- microbenchmark(
'Simulation_Landcover' = {Simulation_Landcover <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI,sv='MERIT', maxdist = 0.01, nsim = 20,debuglevel = 1)},
'Simulation_AverageSV' = {Simulation_AverageSV <- demsimulation(Ba_MERIT, sv='MERIT', lc='Overall', maxdist=0.01, nsim=20,debuglevel = 1)},
'Simulation_CroplandSV' = {Simulation_CroplandSV <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=20,debuglevel = 1)},
times = 5,unit = "s"
)
library(microbenchmark)
mbm <- microbenchmark(
'Simulation_Landcover' = {Simulation_Landcover <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI,sv='MERIT', maxdist = 0.01, nsim = 20,debuglevel = 1)},
'Simulation_AverageSV' = {Simulation_AverageSV <- demsimulation(Ba_MERIT, sv='MERIT', lc='Overall', maxdist=0.01, nsim=20,debuglevel = 1)},
'Simulation_CroplandSV' = {Simulation_CroplandSV <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=20,debuglevel = 1)},
times = 5,unit = "s"
)
mbm <- microbenchmark(
'Simulation_Landcover' = {Simulation_Landcover <- demsimulation_LC(Ba_MERIT,LC_map = Ba_CCI,sv='MERIT', maxdist = 0.01, nsim = 20,debuglevel = 1)},
'Simulation_AverageSV' = {Simulation_AverageSV <- demsimulation(Ba_MERIT, sv='MERIT', lc='Overall', maxdist=0.01, nsim=20,debuglevel = 1)},
'Simulation_CroplandSV' = {Simulation_CroplandSV <- demsimulation(Ba_MERIT, sv='MERIT', lc='Cropland', maxdist=0.01, nsim=20,debuglevel = 1)},
times = 5,unit = "s"
)
autolot(mbm)
autplot(mbm)
plot(mbm)
autoplot.microbenchmark(mbm)
mbm
autoplot.microbenchmark(mbm)+theme_bw()
autoplot.microbenchmark(mbm)+labs(title='test')
autoplot.microbenchmark(mbm)+labs(title="test")
library(ggplot2)
autoplot.microbenchmark(mbm)+labs(title="test")
ggplot(mbm)
ggplot2::autoplot(mbm)
plt <- autoplot(mbmclumpthesis)+aes(fill=expr)+
scale_fill_viridis(discrete = T)
plt <- autoplot(mbm)+aes(fill=expr)+
scale_fill_viridis(discrete = T)
plt <- autoplot(mbm)+aes(fill=expr)
plt
plt <- autoplot(mbm)+labs(title='DEM Simulation performance for Ba')
plt
plt <- autoplot(mbm,log=FALSE)+labs(title='DEM Simulation performance for Ba')
plt
plt <- autoplot(mbm,log=FALSE)+labs(title='DEM Simulation performance for Ba')+theme_bw()
plt
plt <- autoplot(mbm,log=FALSE)+labs(title='DEM Simulation performance for Ba')+theme_bw()+scale_fill_viridis(discrete = T)
devtools::install_github("laurencehawker/DEMsimulation")
devtools::document()
library(DEMsimulation)
library(DEMsimulation)
devtools::document()
citation('DEMsimulation')
