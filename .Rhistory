eval(names(robj1))
text(names(robj1))
modelselect <-function(model=''){
data("MERIT_semi_variograms_NoNugget_Threshold90") #Reads data
if(missing(model)) model='Mekong' #Sets default if missing
modelselect2 <- robj1[[model]]['vgm_sum_fit'] #Reads model name
if(is.null(modelselect2)) stop(paste0('Not a semi-variogram Use',eval(names(robj1)))
#if(modelselect2=NULL) warning('A warning')
return (modelselect2)
}
modelselect <-function(model=''){
data("MERIT_semi_variograms_NoNugget_Threshold90") #Reads data
if(missing(model)) model='Mekong' #Sets default if missing
modelselect2 <- robj1[[model]]['vgm_sum_fit'] #Reads model name
if(is.null(modelselect2)) stop(paste0('Not a semi-variogram Use',eval(names(robj1)))
#if(modelselect2=NULL) warning('A warning')
return (modelselect2)
}
DEM_to_process <- 'MERIT'
setwd('C:/Users/lh14461/PhD/DEM Work')
cci <- raster('Burdekin_CCI.tif') #Load CCI
#cci <- raster('Wax_lake_CCI.tif') #Load CCI
setwd(paste0('C:/Users/lh14461/PhD/DEM Work/DEM_for_SV_Calc/GSW_Threshold_90/',DEM_to_process,'_SV_Processed')) #Sets the wd
#setwd('C:/Users/lh14461/PhD/DEM Work')
rm(Processed_raster_list)
Processed_raster_list = list.files(pattern=".tif", recursive = TRUE) #List files
library(raster)
library(gstat)
library(stringr)
library(gridExtra)
library(ggplot2)
DEM_to_process <- 'MERIT'
setwd('C:/Users/lh14461/PhD/DEM Work')
cci <- raster('Burdekin_CCI.tif') #Load CCI
#cci <- raster('Wax_lake_CCI.tif') #Load CCI
setwd(paste0('C:/Users/lh14461/PhD/DEM Work/DEM_for_SV_Calc/GSW_Threshold_90/',DEM_to_process,'_SV_Processed')) #Sets the wd
#setwd('C:/Users/lh14461/PhD/DEM Work')
rm(Processed_raster_list)
Processed_raster_list = list.files(pattern=".tif", recursive = TRUE) #List files
deltaname <- word(Processed_raster_list, 1, sep = fixed('_')) #Delta names
deltanm <-names(robj1)
modelselect <-function(model=''){
data("MERIT_semi_variograms_NoNugget_Threshold90") #Reads data
if(missing(model)) model='Mekong' #Sets default if missing
modelselect2 <- robj1[[model]]['vgm_sum_fit'] #Reads model name
if(is.null(modelselect2)) stop(paste0('Not a semi-variogram Use',names(robj1)))
#if(modelselect2=NULL) warning('A warning')
return (modelselect2)
}
modelselect('f')
modelselect <-function(model=''){
data("MERIT_semi_variograms_NoNugget_Threshold90") #Reads data
if(missing(model)) model='Mekong' #Sets default if missing
modelselect2 <- robj1[[model]]['vgm_sum_fit'] #Reads model name
if(is.null(modelselect2)) stop(paste('Not a semi-variogram. Use one of',names(robj1)))
#if(modelselect2=NULL) warning('A warning')
return (modelselect2)
}
modelselect('f')
modelselect <-function(model=''){
data("MERIT_semi_variograms_NoNugget_Threshold90") #Reads data
if(missing(model)) model='Mekong' #Sets default if missing
modelselect2 <- robj1[[model]]['vgm_sum_fit'] #Reads model name
if(is.null(modelselect2)) stop(paste('Not a semi-variogram. Use one of',names(robj1)),collapse="")
#if(modelselect2=NULL) warning('A warning')
return (modelselect2)
}
modelselect('f')
dm <-(paste(names(robj1)),collapse="")
dm <-(paste(names(robj1)),collapse=" ")
dm <-(paste(names(robj1))collapse=" ")
paste(deltanm,collapse = "")
paste(deltanm,collapse = " ")
paste(deltanm,collapse = "   ")
paste(names(robj1),collapse = "   ")
modelselect <-function(model=''){
data("MERIT_semi_variograms_NoNugget_Threshold90") #Reads data
if(missing(model)) model='Mekong' #Sets default if missing
modelselect2 <- robj1[[model]]['vgm_sum_fit'] #Reads model name
if(is.null(modelselect2)) stop(paste('Not a semi-variogram. Use one of',names(robj1),collapse = "   "))
#if(modelselect2=NULL) warning('A warning')
return (modelselect2)
}
modelselect('f')
dm <- paste(names(robj1),collapse = "   ")
modelselect <-function(model=''){
data("MERIT_semi_variograms_NoNugget_Threshold90") #Reads data
if(missing(model)) model='Mekong' #Sets default if missing
modelselect2 <- robj1[[model]]['vgm_sum_fit'] #Reads model name
if(is.null(modelselect2)) stop(paste('Not a semi-variogram. Use one of',dm))
#if(modelselect2=NULL) warning('A warning')
return (modelselect2)
}
modelselect('f')
modelselect <-function(model=''){
data("MERIT_semi_variograms_NoNugget_Threshold90") #Reads data
if(missing(model)) model='Mekong' #Sets default if missing
modelselect2 <- robj1[[model]]['vgm_sum_fit'] #Reads model name
if(is.null(modelselect2)) stop(paste0('Not a semi-variogram. Use one of',names(robj1),collapse = "   "))
#if(modelselect2=NULL) warning('A warning')
return (modelselect2)
}
modelselect('f')
modelselect <-function(model=''){
data("MERIT_semi_variograms_NoNugget_Threshold90") #Reads data
svname <- paste(names(robj1),collapse = "   ")
if(missing(model)) model='Mekong' #Sets default if missing
modelselect2 <- robj1[[model]]['vgm_sum_fit'] #Reads model name
if(is.null(modelselect2)) stop(paste0('Not a semi-variogram. Use one of',svname))
#if(modelselect2=NULL) warning('A warning')
return (modelselect2)
}
modelselect('f')
devtools::build()
devtools::install()
devtools::package_deps()
devtools::load_all(".")
devtools::load_all()
devtools::load_all()
devtools::load_all()
demgeneration()
raster <- raster::raster('data/An_giang_MERIT_extended_R_simulated_1.tif')
demgeneration(raster)
devtools::build()
devtools::load_all()
devtools::check()
search()
devtools::build()
devtools::load_all()
demgeneration(raster)
search()
devtools::load_all()
demgeneration(raster)
modeluse<-modelselect()
demgeneration(raster,modeluse)
demgeneration(raster,modeluse)
devtools::load_all(".")
demgeneration(raster,modeluse)
devtools::load_all(".")
demgeneration(raster,modeluse)
devtools::load_all(".")
demgeneration(raster,modeluse)
sim2<-demgeneration(raster,modeluse,nsim=3)
View(sim2)
devtools::load_all(".")
devtools::document()
devtools::document()
?
?demgeneration
?demgeneration
?demgeneration
devtools::load_all(".")
devtools::document()
?demgeneration
devtools::load_all(".")
devtools::document()
?demgeneration
roxygen2::roxygenise()
?demgeneration
devtools::load_all(".")
?demgeneration
devtools::document()
?demgeneration
nsim=3
target_raster <- raster
sim <-sim2
simDEM <-raster:stack()
for (i in 1:nsim)
{simxy <- sims[c('X','Y',paste0('sim',i))] #Read in xyz of simulations
simraster <- rasterFromXYZ(simxy) #Generate raster from xyz
simraster <- simraster+target_dem #Add simulations to target raster
simDEM <- raster::stack(simDEM,simraster)
#Below is some adjustment to align
#res(testraster) <- 0.000833333353499999 #Reset resolution to that of MERIT ascii
#testraster <- shift(testraster,0.000000000452, -0.000000000639) #Shift corners of DEM
#testraster <- shift(testraster,0.000000000452, 0.000000000361) #Shift corners of DEM
#testraster <- overlay(testraster, target_dem, fun = function(x,y) ifelse(is.na(x) & y >-10,y, x))
#writeRaster(testraster, filename = paste0('An_giang_MERIT_extended_R_simulated_',i,'.tif'), format="GTiff", overwrite=TRUE)
#writeRaster(testraster, filename = paste0('An_giang_MERIT_extended_R_simulated_avgSV_noFens_',i,'.asc'), format="ascii", overwrite=TRUE)
#Could add coordinate system to this
}
sims<-sim
simDEM <-raster:stack()
for (i in 1:nsim)
{simxy <- sims[c('X','Y',paste0('sim',i))] #Read in xyz of simulations
simraster <- rasterFromXYZ(simxy) #Generate raster from xyz
simraster <- simraster+target_dem #Add simulations to target raster
simDEM <- raster::stack(simDEM,simraster)
#Below is some adjustment to align
#res(testraster) <- 0.000833333353499999 #Reset resolution to that of MERIT ascii
#testraster <- shift(testraster,0.000000000452, -0.000000000639) #Shift corners of DEM
#testraster <- shift(testraster,0.000000000452, 0.000000000361) #Shift corners of DEM
#testraster <- overlay(testraster, target_dem, fun = function(x,y) ifelse(is.na(x) & y >-10,y, x))
#writeRaster(testraster, filename = paste0('An_giang_MERIT_extended_R_simulated_',i,'.tif'), format="GTiff", overwrite=TRUE)
#writeRaster(testraster, filename = paste0('An_giang_MERIT_extended_R_simulated_avgSV_noFens_',i,'.asc'), format="ascii", overwrite=TRUE)
#Could add coordinate system to this
}
simDEM <-raster:stack()
for (i in 1:nsim)
{simxy <- sims[c('X','Y',paste0('sim',i))] #Read in xyz of simulations
simraster <- rasterFromXYZ(simxy) #Generate raster from xyz
simraster <- simraster+target_raster #Add simulations to target raster
simDEM <- raster::stack(simDEM,simraster)
#Below is some adjustment to align
#res(testraster) <- 0.000833333353499999 #Reset resolution to that of MERIT ascii
#testraster <- shift(testraster,0.000000000452, -0.000000000639) #Shift corners of DEM
#testraster <- shift(testraster,0.000000000452, 0.000000000361) #Shift corners of DEM
#testraster <- overlay(testraster, target_dem, fun = function(x,y) ifelse(is.na(x) & y >-10,y, x))
#writeRaster(testraster, filename = paste0('An_giang_MERIT_extended_R_simulated_',i,'.tif'), format="GTiff", overwrite=TRUE)
#writeRaster(testraster, filename = paste0('An_giang_MERIT_extended_R_simulated_avgSV_noFens_',i,'.asc'), format="ascii", overwrite=TRUE)
#Could add coordinate system to this
}
simDEM <-raster:stack()
simDEM <- raster:stack()
simDEM <- raster::stack()
for (i in 1:nsim)
{simxy <- sims[c('X','Y',paste0('sim',i))] #Read in xyz of simulations
simraster <- rasterFromXYZ(simxy) #Generate raster from xyz
simraster <- simraster+target_raster #Add simulations to target raster
simDEM <- raster::stack(simDEM,simraster)
#Below is some adjustment to align
#res(testraster) <- 0.000833333353499999 #Reset resolution to that of MERIT ascii
#testraster <- shift(testraster,0.000000000452, -0.000000000639) #Shift corners of DEM
#testraster <- shift(testraster,0.000000000452, 0.000000000361) #Shift corners of DEM
#testraster <- overlay(testraster, target_dem, fun = function(x,y) ifelse(is.na(x) & y >-10,y, x))
#writeRaster(testraster, filename = paste0('An_giang_MERIT_extended_R_simulated_',i,'.tif'), format="GTiff", overwrite=TRUE)
#writeRaster(testraster, filename = paste0('An_giang_MERIT_extended_R_simulated_avgSV_noFens_',i,'.asc'), format="ascii", overwrite=TRUE)
#Could add coordinate system to this
}
formatR::tidy_dir()
devtools::load_all(".")
getwd()
library(formatR)
tidy_dir()
sim2save<-demgeneration(raster,modeluse,nsim=3)
devtools::check()
devtools::load_all(".")
devtools::document()
?demgeneration
devtools::build()
?demgeneration
sim2save
devtools::build()
devtools::check()
devtools::document()
devtools::load_all()
getwd()
r<-raster('data/An_giang_MERIT_extended_R_simulated_1.tif')
m<-modelselect()
sims <- demgeneration(r,m,nsim=3)
devtools::load_all()
sims <- demgeneration(r,m,nsim=3)
View(demgeneration)
?demgeneration
devtools::check_man()
?modelselect
?modelselect
?hello
?demgeneration
devtools::build_vignettes()
devtools::dev_packages()
devtools::as.package()
R CMD Rd2pdf MERITdemgeneratorr
R CMD check
pack <- "MERITdengeneratorr"
path <- find.package(pack)
library(roxygen2)
R CMD Rd2pdf MERITdemgeneratorr
devtools::load_all()
file.exists("~/.ssh/id_rsa.pub")
devtools::build()
R CMD Check
library(MERITdemgeneratorr)
?demgeneration
?modelselect
?hello
library(MERITdemgeneratorr)
?demgeneration
library(MERITdemgeneratorr)
browseVignettes()
devtools::use_vignette("MERITdemgeneratorr")
devtools::build_vignettes()
devtools::check(manual=TRUE)
devtools::install()
library(MERITdemgeneratorr)
?demgeneration
devtools::install()
devtools::build_vignettes()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
library(MERITdemgeneratorr)
modelselect()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
library(MERITdemgeneratorr)
raster('data/An_giang_MERIT_extended_R_simulated_1.tif)
raster('data/An_giang_MERIT_extended_R_simulated_1.tif')
raster('data/An_giang_MERIT_extended_R_simulated_1.tif')
ras <- raster('data/An_giang_MERIT_extended_R_simulated_1.tif')
sv_model <- modelselect()
res <- demgeneration(ras,sv_model,0.012,3)
devtools::build()
res2 <- demgeneration(ras,sv_model,0.012,3)
res3 <- demgeneration(ras,sv_model,maxdist=0.012,nsim=3)
View(demgeneration)
writeRaster(res,filename = names(res), bylayer=TRUE,format="GTiff")
writeRaster(res,filename = names(res), bylayer=TRUE,format="GTiff",overwrite=TRUE)
names(res)
d2<unstack(res)
d2<-unstack(res)
outputnames <- paste(seq_along(d2), ".tiff",sep="")
for(i in seq_along(d2)){writeRaster(d2[[i]], file=outputnames[i])}
outputnames2 <- paste(seq_along(d2))
filename<-"exp"
format<-format
for(i in seq_along(d2)){writeRaster(d2[[i]], file=paste0(filename,outputnames[i]), format=format)}
file=paste0(filename,outputnames[i])
format=format
format="GTiff"
format=format
for(i in seq_along(d2)){writeRaster(d2[[i]], file=paste0(filename,outputnames[i]), format=format)}
for(i in seq_along(d2)){writeRaster(d2[[i]], file=paste0(filename,outputnames2[i]), format=format)}
for(i in seq_along(d2)){writeRaster(d2[[i]], file=paste0(filename,outputnames2[i]), format=format,overwrite=TRUE)}
devtools::build()
devtools::document()
devtools::build()
for(i in seq_along(d2)){writeRaster(d2[[i]], file=paste0(filename,outputnames2[i]), format="ascii",overwrite=TRUE)}
?writeRasterDEM
?demgeneration
devtools::build()
res4 <- demgeneration(ras,sv_model,0.007,3)
library(devtools)
devtools::build()
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
ssh-keygen -t rsa -C "laurence.hawker@bristol.ac.uk"
devtools::build()
devtools::build()
devtools::build()
library(knitr)
install.packages(knitr)
install.packages('knitr')
devtools::build()
install.packages('githubinstall')
gh_list_packages(username='laurencehawker')
library(githubinstall)
gh_list_packages(username='laurencehawker')
gh_list_packages(username='laurencehawker')
library(demgenerator)
demgenerator::modelselect('Mekong')
?modelselect
?demgeneration
?writeRasterDEM
modelselect('mekon')
models <- modelselect('Po Delta')
modelm <- modelselect()
devtools::install_github('gstat')
library(githubinstall)
githubinstall::gh_install_packages('gstat')
install.packages('gstat')
install.packages("gstat")
library(gstat)
library(demgenerator)
modelselect()
meuse()
data("meuse")
data("meuse.grid")
View(meuse.grid)
raster(meuse.grid)
raster(meuse.grid,['dist'])
raster(meuse.grid['dist'])
pwd
pwd()
getwd()
test<-raster('/data/An_giang_MERIT_extended_R_simulated_1.tif')
test<-raster('data/An_giang_MERIT_extended_R_simulated_1.tif')
plot(test)
modelsv <- modelselect()
sims <- demgeneration(test,modelsv,nsim=3)
sessionInfo()
sims
plot(sims)
download.CCI <- function(){
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
lcmap <- download.file(downloadurl,temp)
#lcmap <- download.file(downloadurl,'ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
return (lcmap)
}
download.CCI()
lcmap <-download.CCI()
lcmap <-download.CCI()
lcmap <- raster('ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
lcmap <- raster::raster('ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
lcmap <- download.file(downloadurl,temp)
lcmap_ras <- download.CCI()
lcmap_ras <- raster::raster(temp)
temp
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
download.file(downloadurl,temp,mode='wb')
lcmap_ras <- raster::raster(temp)
plot(lcmap_ras)
raster::plot(lcmap_ras)
getwd()
rasterim <- raster::raster('data/An_giang_MERIT_extended_R_simulated_1.tif')
rasterim
raster::plot(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
mekonglc <- download.CCI(rasterim)
download.CCI(rasterim)
download.CCI(rasterim)
if (missing(targetDEM))
stop("No DEM to simulate selected")
download.CCI()
download.CCI <- function(targetDEM)
{
if (missing(targetDEM))
stop("No DEM to simulate selected")
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
download.file(downloadurl,temp,mode='wb')
lcmap_ras <- raster::raster(temp)
ex<- raster::extent(targetDEM)
lcmap_rascrop <- raster::crop(lcmap_ras,ex) #Crop CCI
CCI <-raster::resample(lcmap_rascrop,targetDEM,method='ngb')
#lcmap <- download.file(downloadurl,'ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
#lcmap <- raster::raster('ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
return (targetDEM)
}
download.CCI()
mekonglc <- download.CCI(rasterim)
lcmap_ras
download.CCI <- function(targetDEM)
{
if (missing(targetDEM))
stop("No DEM to simulate selected")
downloadurl <- 'ftp://geo10.elie.ucl.ac.be/v207/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif'
temp <- tempfile()
download.file(downloadurl,temp,mode='wb')
lcmap_ras <- raster::raster(temp)
ex<- raster::extent(targetDEM)
lcmap_rascrop <- raster::crop(lcmap_ras,ex) #Crop CCI
CCI <-raster::resample(lcmap_rascrop,targetDEM,method='ngb')
#lcmap <- download.file(downloadurl,'ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
#lcmap <- raster::raster('ESACCI-LC-L4-LCCS-Map-300m-P1Y-2000-v2.0.7.tif')
return (CCI)
}
mekonglc <- download.CCI(rasterim)
tmp_dir <- tempdir()
list.files(tmp_dir)
file.exists(temp)
file.remove(temp)
files <- list.files(tmp_dir, full.names = T, pattern = "^file")
files
file.remove(files)
library(demgenerator)
getwd()
mekonglc <- download.CCI(rasterim)
plot(mekonglc)
freq(mekonglc)
?demgeneration
devtools::document()
?download.CCI
library(DEMsimulation)
devtools::use_readme_rmd()
rmarkdown::render("README.Rmd")
cci_lookup <- read.csv('C:/Users/lh14461/PhD/DEM Work/CCI LookupTable.csv')
save(cci_lookup,'cci_lookup.RData')
save(cci_lookup,file = "cci_lookup.RData")
data("cci_lookup")
data("Avg_SV_by_landcover_type_600_slopeexclude_5")
load('C:/Users/lh14461/PhD/DEM Work/Avg_SV_by_landcover_type_600_slopeexclude_5.RData')
MERIT_Avg_LC <- Burdekin_vegSV_avg
save(MERIT_Avg_LC,file = "MERIT_AvgSV_LC.RData")
data("MERIT_AvgSV_LC.RData")
data("MERIT_AvgSV_LC.RData")
data("MERIT_AvgSV_LC.RData")
data("cci_lookup")
data("MERIT_AvgSV_LC")
model <- data("MERIT_AvgSV_LC")
names(MERIT_Avg_LC)
devtools::load_all()
Ba <- raster('C:/Users/lh14461/PhD/DEM Work/DEMsimulation/data/Ba_MERIT_Z.tif')
save(Ba,file = "Ba.RData")
devtools::load_all()
DEMsimulation::Ba
dem <- DEMsimulation::Ba
LC_map <- download.CCI(dem)
LC_map
simt <- demsimulation_LC(target_raster = dem, LC_map = LC_map,maxdist = 0.01, nsim = 10)
target_raster <- dem
target_dem_df <- raster::as.data.frame(target_raster, xy = TRUE, na.rm = TRUE)
dem
as.data.frame(dem)
plot(raster())
